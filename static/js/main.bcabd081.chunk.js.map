{"version":3,"sources":["Day.js","Content.js","Random.js","Archive.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Day","day","this","props","className","href","src","alt","Component","Content","state","data","url","fetch","then","result","json","setState","Random","randoms","map","random","index","Archive","divs","array","element","source","to","Header","thisYear","Date","getFullYear","years","Array","from","_","i","id","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6SAoBeA,G,6KAjBL,IACAC,EAAQC,KAAKC,MAAbF,IACR,OACC,yBAAKG,UAAU,eACd,8DACA,2MACA,gCAAMH,EAAG,MAAT,KACA,gCAAMA,EAAG,KAAT,KACA,uBAAGI,KAAMJ,EAAG,KAAS,yBAAKK,IAAKL,EAAG,IAASG,UAAU,OAAOG,IAAI,UAChE,gCAAMN,EAAG,UAAT,KACA,6BACA,+BAAKA,EAAG,YAAR,U,GAZcO,cCgCHC,E,4MA5BdC,MAAQ,CACJC,KAAM,I,kEAIY,IAAD,OAEVC,EAAQV,KAAKC,MAAbS,IAERC,MAAMD,GACHE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACJ,EAAKE,SAAS,CACZN,KAAMI,S,+BAKJ,IACAJ,EAAST,KAAKQ,MAAdC,KAET,OACC,yBAAKP,UAAU,aACd,kBAAC,EAAD,CAAKH,IAAKU,S,GAzBOH,aCyCPU,E,4MAvCdR,MAAQ,CACJC,KAAM,I,kEAIY,IAAD,OAIlBE,MAFY,8CAGTC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACJ,EAAKE,SAAS,CACZN,KAAMI,S,+BAKJ,IAGFI,EAFWjB,KAAKQ,MAAdC,KAEaS,KAAI,SAACC,EAAQC,GACjC,OACC,yBAAKlB,UAAU,eACd,kBAAC,EAAD,CAAKH,IAAKoB,QAKhB,OACC,oCACC,yBAAKjB,UAAU,aACbe,Q,GAlCgBX,aCqBNe,E,qKArBJpB,GAAO,IAAD,OAEHqB,EAAOtB,KAAKC,MAAMsB,MAAML,KAAI,SAACM,EAASJ,GACxC,IAAMK,EAAS,EAAKxB,MAAMwB,OAAS,IAAMD,EACzC,OACI,yBAAKtB,UAAU,QACX,kBAAC,IAAD,KACI,4BAAI,kBAAC,IAAD,CAAMwB,GAAID,GAASD,SAMvC,OACI,yBAAKtB,UAAU,SACVoB,O,GAhBKhB,aC2CPqB,E,uKAjCP,IAAIC,EAAW,IAAIC,KACnBD,EAAWA,EAASE,cACpB,IAAMC,EAAQC,MAAMC,KAAKD,MAAOJ,EAAW,EAAK,OAAO,SAACM,EAAGC,GAAJ,OAAUA,EAAI,QACrE,OACA,4BAAQC,GAAG,aAAalC,UAAU,UAC9B,yBAAKA,UAAU,aACX,kBAAC,IAAD,KACI,wBAAIkC,GAAG,QAAO,yBAAKA,GAAG,WAAWlC,UAAU,GAAGE,IAAI,aAAaC,IAAI,SAAQ,kBAAC,IAAD,CAAMqB,GAAG,gBAAT,cAE3E,kBAAC,IAAD,CAAMA,GAAG,IAAIxB,UAAU,qBAAvB,QACA,kBAAC,IAAD,CAAMwB,GAAG,uBAAuBxB,UAAU,qBAA1C,YACA,kBAAC,IAAD,CAAMwB,GAAG,qBAAqBxB,UAAU,qBAAxC,UAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,eACd,kBAAC,EAAD,CAAS5B,IAAI,wCAEjB,kBAAC,IAAD,CAAO4B,KAAK,wBACR,kBAAC,EAAD,CAASf,MAASQ,EAAON,OAAO,yBAEpC,kBAAC,IAAD,CAAOa,KAAK,sBACR,kBAAC,EAAD,e,GAvBPhC,aCENiC,E,uKANb,OACC,kBAAC,EAAD,U,GAHejC,aCOEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bcabd081.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Day extends Component {\n\trender(){\n\t\tconst { day } = this.props\n\t\treturn(\n\t\t\t<div className=\"text-center\">\n\t\t\t\t<h1> Astronomy Picture of the Day </h1>\n\t\t\t\t<p>Discover the cosmos! Each day a different image or photograph of our fascinating universe is featured, along with a brief explanation written by a professional astronomer. </p>\n\t\t\t\t<h2> {day['title']} </h2>\n\t\t\t\t<h5> {day['date']} </h5>\n\t\t\t\t<a href={day['url']}><img src={day['url']} className=\"apod\" alt=\"APOD\"/></a>\n\t\t\t\t<h6> {day['copyright']} </h6>\n\t\t\t\t<br />\n\t\t\t\t<p> {day['description']} </p>\n\t\t\t</div>\n\t\t\t)\n\t}\n}\n\nexport default Day","import React, { Component } from 'react';\nimport './Content.css'\nimport Day from './Day'\n\nclass Content extends Component  {\n\n\tstate = {\n    \tdata: [],\n\t  }\n\t  \n  // Code is invoked after the component is mounted/inserted into the DOM tree.\n  componentDidMount() {\n\n    const { url } = this.props\n\n    fetch(url)\n      .then(result => result.json())\n      .then(result => {\n        this.setState({\n          data: result,\n        })\n      })\n  }\n\n  render() {\n    const { data } = this.state\n\n\t  return (\n\t\t  <div className=\"container\">\n\t\t\t  <Day day={data} />\n\t\t  </div>\n\t)}\n}\n\nexport default Content","import React, { Component } from 'react';\nimport './Content.css'\nimport Day from './Day'\n\nclass Random extends Component  {\n\n\tstate = {\n    \tdata: [],\n\t  }\n\t  \n  // Code is invoked after the component is mounted/inserted into the DOM tree.\n  componentDidMount() {\n\n    const url = \"https://apodapi.herokuapp.com/api/?count=1\"\n\n    fetch(url)\n      .then(result => result.json())\n      .then(result => {\n        this.setState({\n          data: result,\n        })\n      })\n  }\n\n  render() {\n    const { data } = this.state\n\n    const randoms = data.map((random, index) => {\n    \treturn(\n    \t\t<div className=\"text-center\">\n    \t\t\t<Day day={random} />\n\t\t\t</div>\n    \t\t)\n    })\n\n\treturn (\n\t\t< >\n\t\t\t<div className=\"container\">\n\t\t\t\t{randoms}\n\t\t\t</div>\n\t\t< />\n\t\t\n\t)}\n}\n\nexport default Random","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\n\nclass Archive extends Component {\n    render(props){\n\n        const divs = this.props.array.map((element, index) => {\n            const source = this.props.source + \"/\" + element\n            return(\n                <div className=\"year\">\n                    <Router>\n                        <h4><Link to={source}>{element}</Link></h4>\n                    </Router>\n                </div>\n            )\n        })\n\n        return(\n            <div className=\"years\">\n                {divs}\n            </div>\n        )\n    }\n}\n\nexport default Archive","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Content from './Content'\nimport Random from './Random'\nimport Archive from './Archive'\n\nclass Header extends Component {\n    render(){\n        let thisYear = new Date()\n        thisYear = thisYear.getFullYear()\n        const years = Array.from(Array((thisYear + 1) - 1995), (_, i) => i + 1995)\n        return (\n        <header id=\"header-nav\" className=\"navbar\">\n            <div className=\"container\">\n                <Router>\n                    <h1 id=\"logo\"><img id=\"logo-img\" className=\"\" src=\"./nasa.png\" alt=\"Logo\"/><Link to=\"/APOD-React/\">APOD NASA</Link></h1>\n                \n                    <Link to=\"/\" className=\"nav-item nav-link\">Home</Link>\n                    <Link to=\"/APOD-React/archives\" className=\"nav-item nav-link\">Archives</Link>\n                    <Link to=\"/APOD-React/random\" className=\"nav-item nav-link\">Random</Link>\n\n                    <Switch>\n                        <Route exact path=\"/APOD-React\">\n                            <Content url=\"https://apodapi.herokuapp.com/api/\"/>\n                        </Route>\n                        <Route path=\"/APOD-React/archives\">\n                            <Archive array = {years} source=\"/APOD-React/archive\"/>\n                        </Route>  \n                        <Route path=\"/APOD-React/random\">\n                            <Random/>\n                        </Route>\n                    </Switch>\n                </Router>\n   \n            </div>\n\n        </header>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './Header';\n\nclass App extends Component {\n\trender(){\n\t\treturn(\n\t\t\t<Header />\n\t\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}